#! /usr/bin/env bash

panic()
{
	echo "error: $@"
	exit 1
}

get_time()
{
	date +"%Y-%m-%d %H:%M:%S"
}

vm_get_state()
{

	local name="$1"
	local buffer
	# Note: Do not put local on the next line as this changes the exit status.
	buffer=$(virsh dominfo "$name" 2> /dev/null) || return 1
	local state=$(sed -n -e 's/^State:[ ]*\(.*\)$/\1/p' <<< "$buffer")
	case "$state" in
	"shut off")
		echo "shut_off";;
	running)
		echo "running";;
	"in shutdown")
		echo "in_shutdown";;
	paused)
		echo "paused";;
	*)
		echo "unknown ($state)";;
	esac
}

vm_wait_for_shutoff()
{
	local name="$1"
	echo "waiting for shutoff"
	while true; do
		state=$(vm_get_state "$name") || return 1
		if [ "$state" = shut_off ]; then
			break
		fi
		sleep 30
	done
	echo "finished wait for shutoff"
	return 0
}

get_checksum()
{
	local file="$1"
	sha512sum - < "$file" | awk '{print $1;}' -
}

usage()
{
	echo "usage: $0 -d work_dir -n vm_name -k ks_file"
	exit 2
}


cmd_dir=$(dirname "$0") || panic "cannot get program directory"
root_dir="$cmd_dir/.."
data_dir="$root_dir/data"

tmp_dir=/var/tmp
debug_level=0
sparsify=1
ks_file=
work_dir=
name=
mirror=muug

while getopts D:d:n:k:t:m:x opt; do
	case "$opt" in
	d)
		work_dir="$OPTARG";;
	n)
		name="$OPTARG";;
	k)
		ks_file="$OPTARG";;
	D)
		debug_level="$OPTARG";;
	t)
		tmp_dir="$OPTARG";;
	m)
		mirror="$OPTARG";;
	x)
		sparsify=0;;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ "$debug_level" -ge 1 ]; then
	set -xv
fi

if [ -z "$work_dir" ]; then
	usage "no work directory specified"
fi
work_dir=$(realpath "$work_dir") || panic "cannot get realpath"
if [ -z "$name" ]; then
	usage "no VM name specified"
fi
if [ -z "$ks_file" ]; then
	usage "no kickstart file specified"
fi
ks_file=$(realpath "$ks_file") || panic "cannot get realpath"

if [ ! -f "$ks_file" ]; then
	panic "kickstart file is missing"
fi

if [ -z "$tmp_dir" ]; then
	tmp_dir="${TMPDIR:-/tmp}"
fi

case "$mirror" in
muug)
	netinst_url="https://muug.ca/mirror/fedora/linux/releases/29/Everything/x86_64/iso/Fedora-Everything-netinst-x86_64-29-1.2.iso"
	;;
*)
	netinst_url="https://download.fedoraproject.org/pub/fedora/linux/releases/29/Everything/x86_64/iso/Fedora-Everything-netinst-x86_64-29-1.2.iso"
	;;
esac

cat <<- EOF
work directory: $work_dir
kickstart file: $ks_file
VM name: $name
temporary directory: $tmp_dir
sparsify: $sparsify
mirror: $mirror
netinst URL: $netinst_url
EOF

#exit

download_dir="$work_dir/downloads"
image_dir="$work_dir/images"

netinst_base=$(basename "$netinst_url") || panic "cannot get base name"
netinst_file="$download_dir/$netinst_base"

disk_file="$image_dir/$name.qcow2"
orig_file="$image_dir/${name}-original.qcow2"
orig_csum_file="$image_dir/${name}-original.qcow2-SHA512SUM"
sparse_file="$image_dir/${name}-sparsified.qcow2"
vmdk_file="$image_dir/$name.vmdk"
gzvmdk_file="$image_dir/$name.vmdk.gz"
vdi_file="$image_dir/$name.vdi"
gzvdi_file="$image_dir/$name.vdi.gz"
csum_file="$image_dir/SHA512SUM"

ks_base=$(basename "$ks_file") || \
  panic "cannot get base name"

for dir in "$work_dir" "$download_dir" "$image_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir "$dir" || panic "cannot make directory $dir"
		chmod a+rx "$dir"
	fi
done

echo "START TIME: $(get_time)"

ls -l "$download_dir"
ls -l "$image_dir"

if [ ! -f "$netinst_file" ]; then
	wget -O "$netinst_file" "$netinst_url" || \
	  panic "cannot download netinst"
fi

if [ ! -f "$disk_file" ]; then
	for file in "$orig_file" "$orig_csum_file"; do
		if [ -f "$file" ]; then
			rm -f "$file" || panic "cannot remove file $file"
		fi
	done
	virt-install \
	  --name "$name" \
	  --memory 16384 \
	  --vcpus 4 \
	  --disk path=$disk_file,format=qcow2,size=16 \
	  --os-type linux \
	  --network bridge=virbr0 \
	  --graphics spice \
	  --location "$netinst_file" \
	  --initrd-inject "$ks_file" \
	  --extra-args "ks=file:/$ks_base" \
	  --events on_poweroff=preserve \
	  || panic "virt-install failed"
	vm_wait_for_shutoff "$name" || panic "wait for VM shut off failed"
	echo "INSTALL FINISHED: $(get_time)"
	if [ ! -f "$disk_file" ]; then
		panic "disk image missing"
	fi
	cp "$disk_file" "$orig_file" || panic "cannot copy file"
	chmod a-w "$orig_file" || panic "cannot change file permissions"
	echo "COPY FINISHED: $(get_time)"
	get_checksum "$orig_file" > "$orig_csum_file" || \
	  panic "cannot make checksum file"
fi

vm_wait_for_shutoff "$name" || panic "wait for VM shut off failed"
echo "WAIT FINISHED: $(get_time)"

if [ ! -f "$orig_file" ]; then
	panic "missing file $orig_file"
fi

ls -l "$image_dir"
#ls -l "$orig_file"

for file in "$sparse_file" "$vdi_file" "$gzvdi_file" "$vmdk_file" \
  "$csum_file"; do
	if [ -f "$file" ]; then
		rm -f "$file" || panic "cannot remove file $file"
	fi
done

if [ "$sparsify" -ne 0 ]; then
	TMPDIR="$tmp_dir" \
	  virt-sparsify "$orig_file" "$sparse_file" || \
	  panic "cannot sparsify VM image"
else
	cp "$orig_file" "$sparse_file" || \
	  panic "cannot copy file"
fi

#ls -l "$sparse_file"
ls -l "$image_dir"

echo "Converting from QCOW2 to VDI"
qemu-img convert -f qcow2 -O vdi \
  "$sparse_file" "$vdi_file" || \
  panic "cannot convert image"

#ls -l "$vdi_file"
ls -l "$image_dir"

echo "Compressing VDI image"
gzip -c "$vdi_file" > "$gzvdi_file" || \
  panic "cannot compress image"
ls -l "$gzvdi_file"
rm -f "$vdi_file" || \
  panic "cannot remove file $vdi_file"

echo "Converting from QCOW2 to VMDK"
qemu-img convert -f qcow2 -O vmdk \
  -o adapter_type=lsilogic,subformat=streamOptimized,compat6 \
  "$sparse_file" "$vmdk_file" || \
  panic "cannot convert image"

#ls -l "$vmdk_file"
ls -l "$image_dir"

#echo "Compressing VMDK image"
#gzip -c "$vmdk_file" > "$gzvmdk_file" || panic "cannot compress image"
#ls -l "$gzvmdk_file"

(cd "$image_dir" && \
  sha512sum "$orig_file" "$sparse_file" "$gzvdi_file" "$vmdk_file") \
  > "$csum_file" || \
  panic "cannot generate checksum file"

echo "FINISHED: $(get_time)"

exit

##########
  --cdrom "$netinst_file" \

